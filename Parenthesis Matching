/*
Angelu Ferdinand A. Garcia
CC12-A | Mr. Jun Rangie Obispo
1/11/19
This program evaluates if parentheses are matched.
*/

import java.util.Scanner;
public class mParen
{
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int cases = input.nextInt();

        String[] paren = new String[cases];
        myStacks stack = new myStacks(cases);

        for (int i = 0; i < cases; i++)
        {
            paren[i] = input.next();

            if (isMatched(paren[i], stack)==true)
            {
                paren[i]="properly matched";//reusing array of type string paren, previously used for storage of inputs, for storage of results.
                stack.clear();
            }
            else {
                paren[i]="not properly matched";
                stack.clear();
            }
        }
        System.out.println();
        printResults(paren);
    }

    public static boolean isMatched(String characters, myStacks stack)//receives the String of parentheses to be analyzed, and stack for push and pop
                                                                        //returns true if stack is empty
                                                                        //returns false if stack is not empty
    {
        for (int i = 0; i<characters.length(); i++)
        {
            if (characters.charAt(i)=='(')
                stack.push(1);
            else
                stack.pop();
        }

        if (stack.isEmpty()==false || stack.isNegativeTop()==true)// if stack is not empty, and if pop operations done > the array size, unmatched.
            return false;
        else
            return true;
    }

    public static void printResults(String[] paren)
    {
        for (int i = 0; i<paren.length; i++)
            System.out.println("Case#"+(i+1)+": "+paren[i]);
        return;
    }
}

public class myStacks
{
    private int[] arrayStack;
    private int size;
    private int top=-1;

    public myStacks(int x)//setter
    {
        size = x;
        arrayStack = new int[size];
    }
    public boolean isFull()
    {
        if (top==size-1)
            return true;
        else
            return false;
    }
    public boolean isEmpty()
    {
        if (top==-1)
            return true;
        else
            return false;
    }
    /*public boolean isEmpty()//alternative operation of checking if stack is empty.
    {
        for (int i = 0; i<size; i++)
        {
            if (arrayStack[i]>0)
                return false;
        }
        return true;
    }*/
    public void push(int el)
    {
        if (isFull()==true)
        {
            //System.out.println("Error: Stack is full.");
            return;
        }
        else
        {
            top++;
            arrayStack[top]=el;
            return;
        }
    }
    public void pop()
    {
        /*if (isEmpty()==true) //THESE CAN'T BE USED GIVEN THE PROBLEM
        {
            //System.out.println("Error: Stack is empty.");
            return;
        }
        else
        {
            top--;
            return;
        }*/
        top--;
        return;
    }
    public int peek()
    {
        return arrayStack[top];
    }

    public void clear()
    {
        top=-1;
        return;
    }
    public boolean isNegativeTop()
    {
        if (top<-1)
            return true;
        else
            return false;
    }


}
